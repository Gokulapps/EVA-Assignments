# -*- coding: utf-8 -*-
"""Utils.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1BTSF4w5vz84zXxZVC34KQMRvoNgtLK3v
"""

import torch 
import torchvision 
import torch.nn as nn 
import torch.nn.functional as F
import torch.optim as optim 
import torch.autograd as grad
import matplotlib.pyplot as plt
import numpy as np
import warnings
from torch.optim.lr_scheduler import StepLR
from torchvision import datasets, transforms
from torch.utils.data import Dataset
from torch.utils.data import DataLoader
warnings.filterwarnings("ignore")


def visualize_images(images, target, classes=None, fig_size=(6.4, 4.8)):
  try:
    if classes:
      collection = [classes[target[i].item()] for i in range(target.shape[0])]
    plt.figure(figsize=fig_size)
    grid = torchvision.utils.make_grid(images, 12)
    plt.title('     '.join(collection))
    plt.imshow(np.transpose(grid, (1, 2, 0)))
  except Exception as e:
    print(e)


def plot_graph(test_losses, test_acc, fig_size=(15,10)):
  try:
    fig, axs = plt.subplots(2, 1, figsize=fig_size)
    axs[0].plot(test_losses, color='green')
    axs[0].set_title("Validation Loss")
    axs[0].set_xlabel('Number of Epoch')
    axs[0].set_ylabel('Loss')
    axs[1].plot(test_acc, color='green')
    axs[1].set_title("Validation Accuracy")
    axs[1].set_xlabel('Number of Epoch')
    axs[1].set_ylabel('Accuracy(%)')
    plt.show()
  except Exception as e:
    print(e)


def plot_misclassified_images(incorrect_predictions, classes, fig_size=(10, 10)):
  try:
    fig = plt.figure(figsize=fig_size)
    for index, dataset in enumerate(incorrect_predictions[:10], start=1):
      plt.subplot(5, 2, index)
      plt.axis('off')
      image = (incorrect_predictions[index - 1][0].to('cpu').numpy() / 2) + 0.5
      npimage = np.transpose(image, (1, 2, 0))
      plt.title(f'Model Prediction : {classes[incorrect_predictions[index-1][1]]}, Actual Label : {classes[incorrect_predictions[index-1][2]]}')
      plt.imshow(npimage, cmap='gray_r')
  except Exception as e:
    print(e)

def get_mean_and_std(dataset):
    mean = torch.zeros(3)
    std = torch.zeros(3)
    for inputs, targets in dataset:
        for i in range(3):
            mean[i] += inputs[i,:,:].mean()
            std[i] += inputs[i,:,:].std()
    mean.div_(len(dataset))
    std.div_(len(dataset))
    return mean.numpy(), std.numpy()